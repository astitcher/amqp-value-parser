%name PnParser

%token_prefix PN_TOK_

%include {
#include <proton/codec.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

}

%extra_argument { pn_data_t* data }

%start_symbol start

%token_type  { pn_bytes_t }

%type binary { pn_bytes_t }
%type string { pn_bytes_t }
%type id     { pn_bytes_t }
%type int    { int64_t }
%type uint   { uint64_t }
%type float  { double }

%syntax_error {
    pn_data_clear(data);
    pn_error_format(pn_data_error(data), PN_ERR,
        "Syntax error near \"%.*s\"\n", (int)TOKEN.size, TOKEN.start);
}

start ::= value .

/* Error recovery strategy is ignore the rest of the input! */
start ::= error .

binary(O) ::= BINARY(S) . { O = S; }
string(O) ::= STRING(S) . { O = S; }
id(O)     ::= ID(S) .     { O = S; }
/* Null terminate, then convert, then "unterminate" */
int(O)    ::= INT(S) .    { char* p = S.start+S.size; char c = *p; *p = '\0'; O = atoll(S.start); *p = c; }
uint(O)   ::= BINT(S) .   { char* p = S.start+S.size; char c = *p; *p = '\0'; O = strtoull(S.start, 0, 2); *p = c; }
uint(O)   ::= OINT(S) .   { char* p = S.start+S.size; char c = *p; *p = '\0'; O = strtoull(S.start, 0, 8); *p = c; }
uint(O)   ::= HINT(S) .   { char* p = S.start+S.size; char c = *p; *p = '\0'; O = strtoull(S.start, 0, 16); *p = c; }
float(O)  ::= FLOAT(S) .  { char* p = S.start+S.size; char c = *p; *p = '\0'; O = atof(S.start); *p = c; }

value ::= described_value .
value ::= map .
value ::= list .
value ::= simple_value .

simple_value ::= symbol .
simple_value ::= int(I) .                { pn_data_put_long(data, I); }
simple_value ::= uint(I) .               { pn_data_put_ulong(data, I); }
simple_value ::= binary(S) .             { pn_data_put_binary(data, S); }
simple_value ::= string(S) .             { pn_data_put_string(data, S); }
simple_value ::= float(F) .              { pn_data_put_float(data, F); }
simple_value ::= TRUE .                  { pn_data_put_bool(data, true); }
simple_value ::= FALSE .                 { pn_data_put_bool(data, false); }
simple_value ::= NULL .                  { pn_data_put_null(data); }

descriptor_value ::= symbol .
descriptor_value ::= int(I) .            { pn_data_put_ulong(data, I); }
descriptor_value ::= uint(I) .           { pn_data_put_ulong(data, I); }

label ::= id .

descriptor ::= descriptor_value .
descriptor ::= label LPAREN descriptor_value RPAREN .

described_value_head ::= AT .            { pn_data_put_described(data); pn_data_enter(data); }
described_value ::= described_value_head descriptor value . { pn_data_exit(data); }

map_key ::= simple_value .

map_entry ::= map_key EQUAL value .
map_entry ::= map_key DARROW value .
map_entry ::= map_key COLON value .

map_list ::= map_entry .
map_list ::= map_list COMMA map_entry .

map_head ::= LBRACE .                    { pn_data_put_map(data); pn_data_enter(data); }
map ::= map_head RBRACE .                { pn_data_exit(data); }
map ::= map_head map_list RBRACE .       { pn_data_exit(data); }

list_entry ::= value .
list_entry ::= label EQUAL value.

list_list ::= list_entry .
list_list ::= list_list COMMA list_entry .

list_head ::= LBRACKET .                 { pn_data_put_list(data); pn_data_enter(data); }
list ::= list_head RBRACKET .            { pn_data_exit(data); }
list ::= list_head list_list RBRACKET .  { pn_data_exit(data); }

symbol ::= COLON string(S) .             { pn_data_put_symbol(data, S); }
symbol ::= COLON id(S) .                 { pn_data_put_symbol(data, S); }
symbol ::= id(S) .                       { pn_data_put_symbol(data, S); }

%code {
#include <stdlib.h>
#include <string.h>

typedef struct {
    size_t size;
    char*  bytes;
} ByteRange;

extern int scan(ByteRange* input, pn_bytes_t* tok);

int pn_data_parse(pn_data_t* data, const char* s)
{
    void* parser = PnParserAlloc( malloc );
    char* ws = strdup(s);
    ByteRange in = { strlen(s), ws };
    int tok;
    pn_bytes_t tokValue;

    while ((tok=scan(&in, &tokValue))) {
        PnParser(parser, tok, tokValue, data);
    }
    PnParser(parser, tok, tokValue, data);

    free(ws);
    PnParserFree(parser, free);
    return pn_data_errno(data);
}
}
